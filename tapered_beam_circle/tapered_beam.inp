
/clear
parres,new,params,save

*afun,rad
PI=acos(-1)
*afun,deg

/prep7
angle=90
nu=0.3
G=(E/(2*(1+nu)))

P=(K_target*dapplied)/Nbeams

!********** solve for the beam parameters (h=0) **********!

eps=10**(-1*6)
r=0.5	! guess
*do,i,1,500
	! /com,iteration %i%, r=%r%
	
	r1=r
	!---Term1---
	term1_a=5-8*r1
	term1_b=term1_a**(5/2)
	term1_c=P/s_allowable
	term1_d=term1_c**(5/3)
	term1=-32*(PI)**(4/3)*dapplied*E**2*term1_b*term1_d

	!---Term2-Part1---
	term2_a=2**(1/6)
	term2_b=3**(1/2)
	term2_c=4*r1-1
	term2_d=term2_c**(1/2)
	term2_e=E/G
	term2_f=term2_e**(5/2)
	term2_g=term2_a*term2_b*P**3*term2_d*term2_f

	!---Term2-Part2(innerterm)---
	inner_a=8*r1**2+2*r1-1
	inner_b=inner_a**2
	inner_c=2*PI
	inner_d=inner_c**(2/3)
	inner_e=5-8*r1
	inner_f=inner_e**2
	inner_g=r1**(2/3)
	inner_h=r1*s_allowable/P
	inner_i=inner_h**(2/3)
	inner_term=E*inner_b+6*inner_d*G*inner_f*inner_g*inner_i

	!---Term2-Part3(denominator)---
	term2_den_a=r1**(5/3)
	term2_den=term2_den_a*s_allowable**2

	!---Term2-Total---
	term2=term2_g*inner_term/term2_den

	f_1=term1+term2
	
	r2=r+eps
	!---Term1---
	term1_a=5-8*r2
	term1_b=term1_a**(5/2)
	term1_c=P/s_allowable
	term1_d=term1_c**(5/3)
	term1=-32*(PI)**(4/3)*dapplied*E**2*term1_b*term1_d

	!---Term2-Part1---
	term2_a=2**(1/6)
	term2_b=3**(1/2)
	term2_c=4*r2-1
	term2_d=term2_c**(1/2)
	term2_e=E/G
	term2_f=term2_e**(5/2)
	term2_g=term2_a*term2_b*P**3*term2_d*term2_f

	!---Term2-Part2(innerterm)---
	inner_a=8*r2**2+2*r2-1
	inner_b=inner_a**2
	inner_c=2*PI
	inner_d=inner_c**(2/3)
	inner_e=5-8*r2
	inner_f=inner_e**2
	inner_g=r2**(2/3)
	inner_h=r2*s_allowable/P
	inner_i=inner_h**(2/3)
	inner_term=E*inner_b+6*inner_d*G*inner_f*inner_g*inner_i

	!---Term2-Part3(denominator)---
	term2_den_a=r2**(5/3)
	term2_den=term2_den_a*s_allowable**2

	!---Term2-Total---
	term2=term2_g*inner_term/term2_den

	f_2=term1+term2
	
	df=(f_2-f_1)/eps

	/com,i:%i% | f_1/df:%f_1/df%
	*if,abs(f_1/df),le,1e-6,then
		*exit
	*else
		! ! /com,r=%r% | df=%df%
		r=r-f_1/df
	*endif
*enddo
/com,r=%r% after %i% iterations

l1_a=2*R+1
l1_b=l1_a**3
l1_c=4*R-1
l1_d=5-8*R
l1_e=E*l1_c/(G*l1_d)
l1_f=l1_e**(3/2)
l1_num=P*l1_b*l1_f
l1_den=12*6**(1/2)*PI*R**2*s_allowable
L1=l1_num/l1_den

L2=L1+h

tmin_a=L1*P*R/s_allowable
tmin_b=tmin_a**(1/3)
tmin_c=2**(2/3)
tmin_d=4*tmin_c*tmin_b
tmin_e=3*(PI)**(1/3)
Tmin=tmin_d/tmin_e

tmax_a=L1*P/s_allowable
tmax_b=tmax_a**(1/3)
tmax_c=2*R+1
tmax_d=2*2**(2/3)*tmax_c*tmax_b
tmax_e=3*(PI)**(1/3)*R**(2/3)
Tmax=tmax_d/tmax_e

beam_angle=atan(((Tmax-Tmin)/2)/L1)


!********** solve for min mathmatical L_min **********!

eps=10**(-1*6)
L_min=2.0 ! guess
*do,i,1,10

	p1=500*dapplied**3*E**3*P-(6000*E**3*P**2*L_min*s_allowable**2)/G**3
	p2=9*L_min**5*s_allowable**4
	p3=900*dapplied*E**2*P**(5/3)*L_min**2*s_allowable**(4/3)
	p4=(p3*(s_allowable/P)**(2/3))/G
	pVal=p1-p2-p4

	p1=500*dapplied**3*E**3*P-(6000*E**3*P**2*L_min*s_allowable**2)/G**3
	p2=9*L_min**5*s_allowable**4
	p3=900*dapplied*E**2*P**(5/3)*L_min**2*s_allowable**(4/3)
	p4=(p3*(s_allowable/P)**(2/3))/G
	pVal1=p1-p2-p4

	L_min=L_min+eps
	p1=500*dapplied**3*E**3*P-(6000*E**3*P**2*L_min*s_allowable**2)/G**3
	p2=9*L_min**5*s_allowable**4
	p3=900*dapplied*E**2*P**(5/3)*L_min**2*s_allowable**(4/3)
	p4=(p3*(s_allowable/P)**(2/3))/G
	pVal2=p1-p2-p4
	dpVal=(pVal2-pVal1)/eps

	*if,abs(dpVal),le,1e-6,then
		*exit
	*else
		L_min=L_min-pVal/dpVal
	*endif
*enddo
/com,L_min=%L_min% after %i% iterations


*del,T_x,,nopr
*if,h,eq,0,then
	*dim,T_x,table,3
	T_x(0,0)=0
	T_x(0,1)=0
	
	T_x(1,0)=0
	T_x(2,0)=L1
	T_x(3,0)=L1+L2
	
	T_x(1,1)=Tmax
	T_x(2,1)=Tmin
	T_x(3,1)=Tmax
*else
	*dim,T_x,table,4
	T_x(0,0)=0
	T_x(0,1)=0
	
	T_x(1,0)=0
	T_x(2,0)=L1
	T_x(3,0)=L1+h
	T_x(4,0)=L1+L2
	
	T_x(1,1)=Tmax
	T_x(2,1)=Tmin
	T_x(3,1)=Tmin
	T_x(4,1)=Tmax
*endif


!********** calculate stress predictions **********!

stress_pred_n_steps=100
*del,stress_pred,,nopr
*dim,stress_pred,array,stress_pred_n_steps,2
*do,x_index,1,stress_pred_n_steps
	x=(x_index-1)*((L1+L2)/(stress_pred_n_steps-1))
	stress_pred(x_index,1)=x
	
	T_curr=T_x(x)
	*if,T_curr,eq,0,then
		I_x=(0.001)**4/12
	*else
		I_x=T_curr**4/12
	*endif
	M_x=-P*(x-((L1+L2)/2))
	
	*if,x,le,L1,then
		stress_pred(x_index,2)=(M_x*2**0.5*T_curr/2)/I_x
	*elseif,x,le,L1+h/2,then
		stress_pred(x_index,2)=(M_x*2**0.5*T_curr/2)/I_x
	*elseif,x,le,L2,then
		stress_pred(x_index,2)=(M_x*2**0.5*T_curr/2)/I_x
	*else
		stress_pred(x_index,2)=(M_x*2**0.5*T_curr/2)/I_x
	*endif
*enddo
*vscfun,stress_pred_max,max,stress_pred(1,2)

!********** build the model **********!

mp,ex,1,E
mp,nuxy,1,nu

et,1,186

csys,0
wpcsys,-1

cone,Tmax/2,Tmin/2,0,L1

*if,h,gt,0,then
	cone,Tmin/2,Tmin/2,L1,L1+h/2
*endif

alls
*if,h,gt,0,then
	wpoffs,,,L1+h/2
*else
	wpoffs,,,L1
*endif
csys,4
vsymm,z,all

type,1
real,1
mat,1

vglue,all

csys,0
wpcsys,-1
wprotat,,,90
vsbw,all
wpcsys,-1
wprotat,,90
vsbw,all

csys,0
alls
lsel,u,loc,z,0
lsel,u,loc,z,L1
lsel,u,loc,z,L1+h/2
lsel,u,loc,z,L2
lsel,u,loc,z,L1+L2
cm,axial_lines_L,line
lesize,all,,,30,,,,,0
! lesize,all,0.02,,,,,,,0
alls
cmsel,u,axial_lines_L
lsel,r,radius,,0.0001,100
cm,circ_lines_L,line
lesize,all,,,8,1

alls
cmsel,u,circ_lines_L
cmsel,u,axial_lines_L
! lsel,u,loc,z,0
! lsel,u,loc,z,L1
lsel,u,loc,z,L1+h/2
lsel,u,loc,z,L2
! lsel,u,loc,z,L1+L2
lesize,all,,,8,8,1

alls
cmsel,u,circ_lines_L
cmsel,u,axial_lines_L
lsel,u,loc,z,0
lsel,u,loc,z,L1
! lsel,u,loc,z,L1+h/2
! lsel,u,loc,z,L2
lsel,u,loc,z,L1+L2
lesize,all,,,8,1/8,1

alls
cmsel,u,circ_lines_L
cmsel,u,axial_lines_L
lplot

alls
vsweep,all

/view,,1,1,1
/auto
eplot

!********** apply boundary conditions **********!

et,2,21
r,2,1e-20,1e-20,1e-20,1e-20,1e-20,1e-20
type,2
real,2
csys,0
MN_beam_start=100000
MN_beam_end=MN_beam_start+1
n,MN_beam_start,0,0,0
n,MN_beam_end,0,0,L1+L2
e,MN_beam_start
e,MN_beam_end

nsel,s,loc,z,0
nsel,a,node,,MN_beam_start
cerig,MN_beam_start,all,all

nsel,s,loc,z,L1+L2
cerig,MN_beam_end,all,all

alls
d,MN_beam_start,all,0
d,MN_beam_end,UX,dapplied*sin(angle)
d,MN_beam_end,UY,dapplied*cos(angle)
d,MN_beam_end,ROTX,0
d,MN_beam_end,ROTY,0
d,MN_beam_end,ROTZ,0


alls
vsum
*get,total_volume,volu,,volu

!********** solve **********!

/solu
alls
solve

!********** post process **********!

/post1

/PLOPTS,INFO,2  
/PLOPTS,LEG1,1  
/PLOPTS,LEG2,0  
/PLOPTS,LEG3,1  
/PLOPTS,FRAME,1 
/PLOPTS,TITLE,1 
/PLOPTS,MINM,1  
/PLOPTS,FILE,0  
/PLOPTS,SPNO,0  
/PLOPTS,LOGO,1  
/PLOPTS,WINS,1  
/PLOPTS,WP,0
/PLOPTS,DATE,0  
/TRIAD,ORIG 

set,last

nsel,s,loc,z,0
nsel,a,loc,z,L1+L2
esln
nsle
esln
nsle
esln
cm,BC_E,elem
alls
cmsel,u,BC_E

/cont,1,8
/dscale,1,20
plnsol,u,sum

plnsol,s,1
*get,max_s1,plnsol,,max

!********** calculate the stiffness **********!

nsel,s,loc,z,L1+L2
esln
fsum
*get,fx,fsum,,item,fx
*get,fy,fsum,,item,fy
Freaction=(fx**2+fy**2)**0.5
Stiffness=(Freaction/dapplied)*Nbeams

!********** get the stress along the beam **********!

alls
*if,h,eq,0,then
	path,all_beam,3,20,stress_pred_n_steps/3
	ppath,1,node(Tmax/2,0,L1+l2)
	ppath,2,node(Tmin/2,0,L1)
	ppath,3,node(Tmax/2,0,0)
*else
	path,all_beam,4,20,stress_pred_n_steps/4
	ppath,1,node(Tmax/2,0,L1+L2)
	ppath,2,node(Tmin/2,0,L2)
	ppath,3,node(Tmin/2,0,L1)
	ppath,4,node(Tmax/2,0,0)
*endif

*del,path_data_all_beam,,nopr
pdef,s1,s,1,avg
pdef,sz,s,z,avg
! prpath,s1
plpath,sz
paget,path_data_all_beam,table

*if,h,eq,0,then
	path,beam_L1,2,20,stress_pred_n_steps
	ppath,1,node(Tmax/2,0,L1+l2)
	ppath,2,node(Tmin/2,0,L1)
*else
	path,beam_L1,3,20,stress_pred_n_steps/2
	ppath,1,node(Tmax/2,0,L1+L2)
	ppath,2,node(Tmin/2,0,L2)
	ppath,3,node(Tmin/2,0,L1+(h/2))
*endif

*del,path_data_L1,,nopr
pdef,s1,s,1,avg
pdef,sz,s,z,avg
! prpath,s1
plpath,sz
pcalc,intg,S_intg,sz,s

paget,path_data_L1,table
! average stress from 0 to L1
*vscfun,S_intg,max,path_data_L1(1,7)
S_intg=S_intg/(L1+(h/2))
! S_intg=path_data_L1(stress_pred_n_steps+1,7)/L1

*get,path_data_all_beam_length,parm,path_data_all_beam,dim,x
L1_s=L1/cos(beam_angle)**2
L2_s=L1_s+h
*do,x_index,1,path_data_all_beam_length
	x=path_data_all_beam(x_index,4)
	
	*if,x,le,L1_s,then
		path_data_all_beam(x_index,10)=x*cos(beam_angle)**2
	*elseif,x,le,L2_s,then
		path_data_all_beam(x_index,10)=(x-L1_s)+L1_s*cos(beam_angle)**2
	*else
		path_data_all_beam(x_index,10)=L2+(x-L2_s)*cos(beam_angle)**2
	*endif
*enddo

!********** write data **********!

*cfopen,cases,csv,,append
*vwrite,case_num,E,dapplied,s_allowable,r,Tmax,Tmin,L1,h,%L1+L2%,K_target,Freaction,Stiffness,%(Stiffness-K_target)/K_target%,max_s1,%(max_s1-s_allowable)/s_allowable%,total_volume,L_min,S_intg
%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G,%G
*cfclos

*cfopen,stress_case_%case_num%,csv
*vwrite,'Path Length (in)','Beam Length (in)','S1 (psi)','SZ (psi)'
%C,%C,%C,%C
*vwrite,path_data_all_beam(1,4),path_data_all_beam(1,10),path_data_all_beam(1,5),path_data_all_beam(1,6)
%G,%G,%G,%G
*vwrite,'L (in)','Stress Prediction (psi)'
%C,%C
*vwrite,stress_pred(1,1),stress_pred(1,2)
%G,%G
*cfclos











